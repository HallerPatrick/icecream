{"version":3,"sources":["../src/astring.js"],"names":[],"mappings":"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","file":"astring.js","sourcesContent":["// Astring is a tiny and fast JavaScript code generator from an ESTree-compliant AST.\n//\n// Astring was written by David Bonnet and released under an MIT license.\n//\n// The Git repository for Astring is available at:\n// https://github.com/davidbonnet/astring.git\n//\n// Please use the GitHub bug tracker to report issues:\n// https://github.com/davidbonnet/astring/issues\n\nconst { stringify } = JSON\n\n/* istanbul ignore if */\nif (!String.prototype.repeat) {\n  /* istanbul ignore next */\n  throw new Error(\n    'String.prototype.repeat is undefined, see https://github.com/davidbonnet/astring#installation'\n  )\n}\n\n/* istanbul ignore if */\nif (!String.prototype.endsWith) {\n  /* istanbul ignore next */\n  throw new Error(\n    'String.prototype.endsWith is undefined, see https://github.com/davidbonnet/astring#installation'\n  )\n}\n\nconst OPERATOR_PRECEDENCE = {\n  '||': 3,\n  '&&': 4,\n  '|': 5,\n  '^': 6,\n  '&': 7,\n  '==': 8,\n  '!=': 8,\n  '===': 8,\n  '!==': 8,\n  '<': 9,\n  '>': 9,\n  '<=': 9,\n  '>=': 9,\n  in: 9,\n  instanceof: 9,\n  '<<': 10,\n  '>>': 10,\n  '>>>': 10,\n  '+': 11,\n  '-': 11,\n  '*': 12,\n  '%': 12,\n  '/': 12,\n  '**': 13,\n}\n\n// Enables parenthesis regardless of precedence\nconst NEEDS_PARENTHESES = 17\n\nconst EXPRESSIONS_PRECEDENCE = {\n  // Definitions\n  ArrayExpression: 20,\n  TaggedTemplateExpression: 20,\n  ThisExpression: 20,\n  Identifier: 20,\n  Literal: 18,\n  TemplateLiteral: 20,\n  Super: 20,\n  SequenceExpression: 20,\n  // Operations\n  MemberExpression: 19,\n  CallExpression: 19,\n  NewExpression: 19,\n  // Other definitions\n  ArrowFunctionExpression: NEEDS_PARENTHESES,\n  ClassExpression: NEEDS_PARENTHESES,\n  FunctionExpression: NEEDS_PARENTHESES,\n  ObjectExpression: NEEDS_PARENTHESES,\n  // Other operations\n  UpdateExpression: 16,\n  UnaryExpression: 15,\n  BinaryExpression: 14,\n  LogicalExpression: 13,\n  ConditionalExpression: 4,\n  AssignmentExpression: 3,\n  AwaitExpression: 2,\n  YieldExpression: 2,\n  RestElement: 1,\n}\n\nfunction formatSequence(state, nodes) {\n  /*\n  Writes into `state` a sequence of `nodes`.\n  */\n  const { generator } = state\n  state.write('(')\n  if (nodes != null && nodes.length > 0) {\n    generator[nodes[0].type](nodes[0], state)\n    const { length } = nodes\n    for (let i = 1; i < length; i++) {\n      const param = nodes[i]\n      state.write(', ')\n      generator[param.type](param, state)\n    }\n  }\n  state.write(')')\n}\n\nfunction expressionNeedsParenthesis(node, parentNode, isRightHand) {\n  const nodePrecedence = EXPRESSIONS_PRECEDENCE[node.type]\n  if (nodePrecedence === NEEDS_PARENTHESES) {\n    return true\n  }\n  const parentNodePrecedence = EXPRESSIONS_PRECEDENCE[parentNode.type]\n  if (nodePrecedence !== parentNodePrecedence) {\n    // Different node types\n    return nodePrecedence < parentNodePrecedence\n  }\n  if (nodePrecedence !== 13 && nodePrecedence !== 14) {\n    // Not a `LogicalExpression` or `BinaryExpression`\n    return false\n  }\n  if (node.operator === '**' && parentNode.operator === '**') {\n    // Exponentiation operator has right-to-left associativity\n    return !isRightHand\n  }\n  if (isRightHand) {\n    // Parenthesis are used if both operators have the same precedence\n    return (\n      OPERATOR_PRECEDENCE[node.operator] <=\n      OPERATOR_PRECEDENCE[parentNode.operator]\n    )\n  }\n  return (\n    OPERATOR_PRECEDENCE[node.operator] <\n    OPERATOR_PRECEDENCE[parentNode.operator]\n  )\n}\n\nfunction formatBinaryExpressionPart(state, node, parentNode, isRightHand) {\n  /*\n  Writes into `state` a left-hand or right-hand expression `node`\n  from a binary expression applying the provided `operator`.\n  The `isRightHand` parameter should be `true` if the `node` is a right-hand argument.\n  */\n  const { generator } = state\n  if (expressionNeedsParenthesis(node, parentNode, isRightHand)) {\n    state.write('(')\n    generator[node.type](node, state)\n    state.write(')')\n  } else {\n    generator[node.type](node, state)\n  }\n}\n\nfunction reindent(state, text, indent, lineEnd) {\n  /*\n  Writes into `state` the `text` string reindented with the provided `indent`.\n  */\n  const lines = text.split('\\n')\n  const end = lines.length - 1\n  state.write(lines[0].trim())\n  if (end > 0) {\n    state.write(lineEnd)\n    for (let i = 1; i < end; i++) {\n      state.write(indent + lines[i].trim() + lineEnd)\n    }\n    state.write(indent + lines[end].trim())\n  }\n}\n\nfunction formatComments(state, comments, indent, lineEnd) {\n  /*\n  Writes into `state` the provided list of `comments`, with the given `indent` and `lineEnd` strings.\n  Line comments will end with `\"\\n\"` regardless of the value of `lineEnd`.\n  Expects to start on a new unindented line.\n  */\n  const { length } = comments\n  for (let i = 0; i < length; i++) {\n    const comment = comments[i]\n    state.write(indent)\n    if (comment.type[0] === 'L') {\n      // Line comment\n      state.write('// ' + comment.value.trim() + '\\n')\n    } else {\n      // Block comment\n      state.write('/*')\n      reindent(state, comment.value, indent, lineEnd)\n      state.write('*/' + lineEnd)\n    }\n  }\n}\n\nfunction hasCallExpression(node) {\n  /*\n  Returns `true` if the provided `node` contains a call expression and `false` otherwise.\n  */\n  let currentNode = node\n  while (currentNode != null) {\n    const { type } = currentNode\n    if (type[0] === 'C' && type[1] === 'a') {\n      // Is CallExpression\n      return true\n    } else if (type[0] === 'M' && type[1] === 'e' && type[2] === 'm') {\n      // Is MemberExpression\n      currentNode = currentNode.object\n    } else {\n      return false\n    }\n  }\n}\n\nfunction formatVariableDeclaration(state, node) {\n  /*\n  Writes into `state` a variable declaration.\n  */\n  const { generator } = state\n  const { declarations } = node\n  state.write(node.kind + ' ')\n  const { length } = declarations\n  if (length > 0) {\n    generator.VariableDeclarator(declarations[0], state)\n    for (let i = 1; i < length; i++) {\n      state.write(', ')\n      generator.VariableDeclarator(declarations[i], state)\n    }\n  }\n}\n\nlet ForInStatement,\n  FunctionDeclaration,\n  RestElement,\n  BinaryExpression,\n  ArrayExpression,\n  BlockStatement\n\nexport const baseGenerator = {\n  Program(node, state) {\n    const indent = state.indent.repeat(state.indentLevel)\n    const { lineEnd, writeComments } = state\n    if (writeComments && node.comments != null) {\n      formatComments(state, node.comments, indent, lineEnd)\n    }\n    const statements = node.body\n    const { length } = statements\n    for (let i = 0; i < length; i++) {\n      const statement = statements[i]\n      if (writeComments && statement.comments != null) {\n        formatComments(state, statement.comments, indent, lineEnd)\n      }\n      state.write(indent)\n      this[statement.type](statement, state)\n      state.write(lineEnd)\n    }\n    if (writeComments && node.trailingComments != null) {\n      formatComments(state, node.trailingComments, indent, lineEnd)\n    }\n  },\n  BlockStatement: (BlockStatement = function(node, state) {\n    const indent = state.indent.repeat(state.indentLevel++)\n    const { lineEnd, writeComments } = state\n    const statementIndent = indent + state.indent\n    state.write('{')\n    const statements = node.body\n    if (statements != null && statements.length > 0) {\n      state.write(lineEnd)\n      if (writeComments && node.comments != null) {\n        formatComments(state, node.comments, statementIndent, lineEnd)\n      }\n      const { length } = statements\n      for (let i = 0; i < length; i++) {\n        const statement = statements[i]\n        if (writeComments && statement.comments != null) {\n          formatComments(state, statement.comments, statementIndent, lineEnd)\n        }\n        state.write(statementIndent)\n        this[statement.type](statement, state)\n        state.write(lineEnd)\n      }\n      state.write(indent)\n    } else {\n      if (writeComments && node.comments != null) {\n        state.write(lineEnd)\n        formatComments(state, node.comments, statementIndent, lineEnd)\n        state.write(indent)\n      }\n    }\n    if (writeComments && node.trailingComments != null) {\n      formatComments(state, node.trailingComments, statementIndent, lineEnd)\n    }\n    state.write('}')\n    state.indentLevel--\n  }),\n  ClassBody: BlockStatement,\n  EmptyStatement(node, state) {\n    state.write(';')\n  },\n  ExpressionStatement(node, state) {\n    const precedence = EXPRESSIONS_PRECEDENCE[node.expression.type]\n    if (\n      precedence === NEEDS_PARENTHESES ||\n      (precedence === 3 && node.expression.left.type[0] === 'O')\n    ) {\n      // Should always have parentheses or is an AssignmentExpression to an ObjectPattern\n      state.write('(')\n      this[node.expression.type](node.expression, state)\n      state.write(')')\n    } else {\n      this[node.expression.type](node.expression, state)\n    }\n    state.write(';')\n  },\n  IfStatement(node, state) {\n    state.write('if (')\n    this[node.test.type](node.test, state)\n    state.write(') ')\n    this[node.consequent.type](node.consequent, state)\n    if (node.alternate != null) {\n      state.write(' else ')\n      this[node.alternate.type](node.alternate, state)\n    }\n  },\n  LabeledStatement(node, state) {\n    this[node.label.type](node.label, state)\n    state.write(': ')\n    this[node.body.type](node.body, state)\n  },\n  BreakStatement(node, state) {\n    state.write('break')\n    if (node.label != null) {\n      state.write(' ')\n      this[node.label.type](node.label, state)\n    }\n    state.write(';')\n  },\n  ContinueStatement(node, state) {\n    state.write('continue')\n    if (node.label != null) {\n      state.write(' ')\n      this[node.label.type](node.label, state)\n    }\n    state.write(';')\n  },\n  WithStatement(node, state) {\n    state.write('with (')\n    this[node.object.type](node.object, state)\n    state.write(') ')\n    this[node.body.type](node.body, state)\n  },\n  SwitchStatement(node, state) {\n    const indent = state.indent.repeat(state.indentLevel++)\n    const { lineEnd, writeComments } = state\n    state.indentLevel++\n    const caseIndent = indent + state.indent\n    const statementIndent = caseIndent + state.indent\n    state.write('switch (')\n    this[node.discriminant.type](node.discriminant, state)\n    state.write(') {' + lineEnd)\n    const { cases: occurences } = node\n    const { length: occurencesCount } = occurences\n    for (let i = 0; i < occurencesCount; i++) {\n      const occurence = occurences[i]\n      if (writeComments && occurence.comments != null) {\n        formatComments(state, occurence.comments, caseIndent, lineEnd)\n      }\n      if (occurence.test) {\n        state.write(caseIndent + 'case ')\n        this[occurence.test.type](occurence.test, state)\n        state.write(':' + lineEnd)\n      } else {\n        state.write(caseIndent + 'default:' + lineEnd)\n      }\n      const { consequent } = occurence\n      const { length: consequentCount } = consequent\n      for (let i = 0; i < consequentCount; i++) {\n        const statement = consequent[i]\n        if (writeComments && statement.comments != null) {\n          formatComments(state, statement.comments, statementIndent, lineEnd)\n        }\n        state.write(statementIndent)\n        this[statement.type](statement, state)\n        state.write(lineEnd)\n      }\n    }\n    state.indentLevel -= 2\n    state.write(indent + '}')\n  },\n  ReturnStatement(node, state) {\n    state.write('return')\n    if (node.argument) {\n      state.write(' ')\n      this[node.argument.type](node.argument, state)\n    }\n    state.write(';')\n  },\n  ThrowStatement(node, state) {\n    state.write('throw ')\n    this[node.argument.type](node.argument, state)\n    state.write(';')\n  },\n  TryStatement(node, state) {\n    state.write('try ')\n    this[node.block.type](node.block, state)\n    if (node.handler) {\n      const { handler } = node\n      state.write(' catch (')\n      this[handler.param.type](handler.param, state)\n      state.write(') ')\n      this[handler.body.type](handler.body, state)\n    }\n    if (node.finalizer) {\n      state.write(' finally ')\n      this[node.finalizer.type](node.finalizer, state)\n    }\n  },\n  WhileStatement(node, state) {\n    state.write('while (')\n    this[node.test.type](node.test, state)\n    state.write(') ')\n    this[node.body.type](node.body, state)\n  },\n  DoWhileStatement(node, state) {\n    state.write('do ')\n    this[node.body.type](node.body, state)\n    state.write(' while (')\n    this[node.test.type](node.test, state)\n    state.write(');')\n  },\n  ForStatement(node, state) {\n    state.write('for (')\n    if (node.init != null) {\n      const { init } = node\n      if (init.type[0] === 'V') {\n        formatVariableDeclaration(state, init)\n      } else {\n        this[init.type](init, state)\n      }\n    }\n    state.write('; ')\n    if (node.test) {\n      this[node.test.type](node.test, state)\n    }\n    state.write('; ')\n    if (node.update) {\n      this[node.update.type](node.update, state)\n    }\n    state.write(') ')\n    this[node.body.type](node.body, state)\n  },\n  ForInStatement: (ForInStatement = function(node, state) {\n    state.write('for (')\n    const { left } = node\n    if (left.type[0] === 'V') {\n      formatVariableDeclaration(state, left)\n    } else {\n      this[left.type](left, state)\n    }\n    // Identifying whether node.type is `ForInStatement` or `ForOfStatement`\n    state.write(node.type[3] === 'I' ? ' in ' : ' of ')\n    this[node.right.type](node.right, state)\n    state.write(') ')\n    this[node.body.type](node.body, state)\n  }),\n  ForOfStatement: ForInStatement,\n  DebuggerStatement(node, state) {\n    state.write('debugger;' + state.lineEnd)\n  },\n  FunctionDeclaration: (FunctionDeclaration = function(node, state) {\n    state.write(\n      (node.async ? 'async ' : '') +\n        (node.generator ? 'function* ' : 'function ') +\n        (node.id ? node.id.name : ''),\n      node\n    )\n    formatSequence(state, node.params)\n    state.write(' ')\n    this[node.body.type](node.body, state)\n  }),\n  FunctionExpression: FunctionDeclaration,\n  VariableDeclaration(node, state) {\n    formatVariableDeclaration(state, node)\n    state.write(';')\n  },\n  VariableDeclarator(node, state) {\n    this[node.id.type](node.id, state)\n    if (node.init != null) {\n      state.write(' = ')\n      this[node.init.type](node.init, state)\n    }\n  },\n  ClassDeclaration(node, state) {\n    state.write('class ' + (node.id ? `${node.id.name} ` : ''), node)\n    if (node.superClass) {\n      state.write('extends ')\n      this[node.superClass.type](node.superClass, state)\n      state.write(' ')\n    }\n    this.ClassBody(node.body, state)\n  },\n  ImportDeclaration(node, state) {\n    state.write('import ')\n    const { specifiers } = node\n    const { length } = specifiers\n    // NOTE: Once babili is fixed, put this after condition\n    // https://github.com/babel/babili/issues/430\n    let i = 0\n    if (length > 0) {\n      for (; i < length; ) {\n        if (i > 0) {\n          state.write(', ')\n        }\n        const specifier = specifiers[i]\n        const type = specifier.type[6]\n        if (type === 'D') {\n          // ImportDefaultSpecifier\n          state.write(specifier.local.name, specifier)\n          i++\n        } else if (type === 'N') {\n          // ImportNamespaceSpecifier\n          state.write('* as ' + specifier.local.name, specifier)\n          i++\n        } else {\n          // ImportSpecifier\n          break\n        }\n      }\n      if (i < length) {\n        state.write('{')\n        for (;;) {\n          const specifier = specifiers[i]\n          const { name } = specifier.imported\n          state.write(name, specifier)\n          if (name !== specifier.local.name) {\n            state.write(' as ' + specifier.local.name)\n          }\n          if (++i < length) {\n            state.write(', ')\n          } else {\n            break\n          }\n        }\n        state.write('}')\n      }\n      state.write(' from ')\n    }\n    this.Literal(node.source, state)\n    state.write(';')\n  },\n  ExportDefaultDeclaration(node, state) {\n    state.write('export default ')\n    this[node.declaration.type](node.declaration, state)\n    if (\n      EXPRESSIONS_PRECEDENCE[node.declaration.type] &&\n      node.declaration.type[0] !== 'F'\n    ) {\n      // All expression nodes except `FunctionExpression`\n      state.write(';')\n    }\n  },\n  ExportNamedDeclaration(node, state) {\n    state.write('export ')\n    if (node.declaration) {\n      this[node.declaration.type](node.declaration, state)\n    } else {\n      state.write('{')\n      const { specifiers } = node,\n        { length } = specifiers\n      if (length > 0) {\n        for (let i = 0; ; ) {\n          const specifier = specifiers[i]\n          const { name } = specifier.local\n          state.write(name, specifier)\n          if (name !== specifier.exported.name) {\n            state.write(' as ' + specifier.exported.name)\n          }\n          if (++i < length) {\n            state.write(', ')\n          } else {\n            break\n          }\n        }\n      }\n      state.write('}')\n      if (node.source) {\n        state.write(' from ')\n        this.Literal(node.source, state)\n      }\n      state.write(';')\n    }\n  },\n  ExportAllDeclaration(node, state) {\n    state.write('export * from ')\n    this.Literal(node.source, state)\n    state.write(';')\n  },\n  MethodDefinition(node, state) {\n    if (node.static) {\n      state.write('static ')\n    }\n    const kind = node.kind[0]\n    if (kind === 'g' || kind === 's') {\n      // Getter or setter\n      state.write(node.kind + ' ')\n    }\n    if (node.value.async) {\n      state.write('async ')\n    }\n    if (node.value.generator) {\n      state.write('*')\n    }\n    if (node.computed) {\n      state.write('[')\n      this[node.key.type](node.key, state)\n      state.write(']')\n    } else {\n      this[node.key.type](node.key, state)\n    }\n    formatSequence(state, node.value.params)\n    state.write(' ')\n    this[node.value.body.type](node.value.body, state)\n  },\n  ClassExpression(node, state) {\n    this.ClassDeclaration(node, state)\n  },\n  ArrowFunctionExpression(node, state) {\n    state.write(node.async ? 'async ' : '', node)\n    const { params } = node\n    if (params != null) {\n      // Omit parenthesis if only one named parameter\n      if (params.length === 1 && params[0].type[0] === 'I') {\n        // If params[0].type[0] starts with 'I', it can't be `ImportDeclaration` nor `IfStatement` and thus is `Identifier`\n        state.write(params[0].name, params[0])\n      } else {\n        formatSequence(state, node.params)\n      }\n    }\n    state.write(' => ')\n    if (node.body.type[0] === 'O') {\n      // Body is an object expression\n      state.write('(')\n      this.ObjectExpression(node.body, state)\n      state.write(')')\n    } else {\n      this[node.body.type](node.body, state)\n    }\n  },\n  ThisExpression(node, state) {\n    state.write('this', node)\n  },\n  Super(node, state) {\n    state.write('super', node)\n  },\n  RestElement: (RestElement = function(node, state) {\n    state.write('...')\n    this[node.argument.type](node.argument, state)\n  }),\n  SpreadElement: RestElement,\n  YieldExpression(node, state) {\n    state.write(node.delegate ? 'yield*' : 'yield')\n    if (node.argument) {\n      state.write(' ')\n      this[node.argument.type](node.argument, state)\n    }\n  },\n  AwaitExpression(node, state) {\n    state.write('await ')\n    if (node.argument) {\n      this[node.argument.type](node.argument, state)\n    }\n  },\n  TemplateLiteral(node, state) {\n    const { quasis, expressions } = node\n    state.write('`')\n    const { length } = expressions\n    for (let i = 0; i < length; i++) {\n      const expression = expressions[i]\n      state.write(quasis[i].value.raw)\n      state.write('${')\n      this[expression.type](expression, state)\n      state.write('}')\n    }\n    state.write(quasis[quasis.length - 1].value.raw)\n    state.write('`')\n  },\n  TaggedTemplateExpression(node, state) {\n    this[node.tag.type](node.tag, state)\n    this[node.quasi.type](node.quasi, state)\n  },\n  ArrayExpression: (ArrayExpression = function(node, state) {\n    state.write('[')\n    if (node.elements.length > 0) {\n      const { elements } = node,\n        { length } = elements\n      for (let i = 0; ; ) {\n        const element = elements[i]\n        if (element != null) {\n          this[element.type](element, state)\n        }\n        if (++i < length) {\n          state.write(', ')\n        } else {\n          if (element == null) {\n            state.write(', ')\n          }\n          break\n        }\n      }\n    }\n    state.write(']')\n  }),\n  ArrayPattern: ArrayExpression,\n  ObjectExpression(node, state) {\n    const indent = state.indent.repeat(state.indentLevel++)\n    const { lineEnd, writeComments } = state\n    const propertyIndent = indent + state.indent\n    state.write('{')\n    if (node.properties.length > 0) {\n      state.write(lineEnd)\n      if (writeComments && node.comments != null) {\n        formatComments(state, node.comments, propertyIndent, lineEnd)\n      }\n      const comma = ',' + lineEnd\n      const { properties } = node,\n        { length } = properties\n      for (let i = 0; ; ) {\n        const property = properties[i]\n        if (writeComments && property.comments != null) {\n          formatComments(state, property.comments, propertyIndent, lineEnd)\n        }\n        state.write(propertyIndent)\n        this.Property(property, state)\n        if (++i < length) {\n          state.write(comma)\n        } else {\n          break\n        }\n      }\n      state.write(lineEnd)\n      if (writeComments && node.trailingComments != null) {\n        formatComments(state, node.trailingComments, propertyIndent, lineEnd)\n      }\n      state.write(indent + '}')\n    } else if (writeComments) {\n      if (node.comments != null) {\n        state.write(lineEnd)\n        formatComments(state, node.comments, propertyIndent, lineEnd)\n        if (node.trailingComments != null) {\n          formatComments(state, node.trailingComments, propertyIndent, lineEnd)\n        }\n        state.write(indent + '}')\n      } else if (node.trailingComments != null) {\n        state.write(lineEnd)\n        formatComments(state, node.trailingComments, propertyIndent, lineEnd)\n        state.write(indent + '}')\n      } else {\n        state.write('}')\n      }\n    } else {\n      state.write('}')\n    }\n    state.indentLevel--\n  },\n  Property(node, state) {\n    if (node.method || node.kind[0] !== 'i') {\n      // Either a method or of kind `set` or `get` (not `init`)\n      this.MethodDefinition(node, state)\n    } else {\n      if (!node.shorthand) {\n        if (node.computed) {\n          state.write('[')\n          this[node.key.type](node.key, state)\n          state.write(']')\n        } else {\n          this[node.key.type](node.key, state)\n        }\n        state.write(': ')\n      }\n      this[node.value.type](node.value, state)\n    }\n  },\n  ObjectPattern(node, state) {\n    state.write('{')\n    if (node.properties.length > 0) {\n      const { properties } = node,\n        { length } = properties\n      for (let i = 0; ; ) {\n        this[properties[i].type](properties[i], state)\n        if (++i < length) {\n          state.write(', ')\n        } else {\n          break\n        }\n      }\n    }\n    state.write('}')\n  },\n  SequenceExpression(node, state) {\n    formatSequence(state, node.expressions)\n  },\n  UnaryExpression(node, state) {\n    if (node.prefix) {\n      state.write(node.operator)\n      if (node.operator.length > 1) {\n        state.write(' ')\n      }\n      if (\n        EXPRESSIONS_PRECEDENCE[node.argument.type] <\n        EXPRESSIONS_PRECEDENCE.UnaryExpression\n      ) {\n        state.write('(')\n        this[node.argument.type](node.argument, state)\n        state.write(')')\n      } else {\n        this[node.argument.type](node.argument, state)\n      }\n    } else {\n      // FIXME: This case never occurs\n      this[node.argument.type](node.argument, state)\n      state.write(node.operator)\n    }\n  },\n  UpdateExpression(node, state) {\n    // Always applied to identifiers or members, no parenthesis check needed\n    if (node.prefix) {\n      state.write(node.operator)\n      this[node.argument.type](node.argument, state)\n    } else {\n      this[node.argument.type](node.argument, state)\n      state.write(node.operator)\n    }\n  },\n  AssignmentExpression(node, state) {\n    this[node.left.type](node.left, state)\n    state.write(' ' + node.operator + ' ')\n    this[node.right.type](node.right, state)\n  },\n  AssignmentPattern(node, state) {\n    this[node.left.type](node.left, state)\n    state.write(' = ')\n    this[node.right.type](node.right, state)\n  },\n  BinaryExpression: (BinaryExpression = function(node, state) {\n    if (node.operator === 'in') {\n      // Avoids confusion in `for` loops initializers\n      state.write('(')\n      formatBinaryExpressionPart(state, node.left, node, false)\n      state.write(' ' + node.operator + ' ')\n      formatBinaryExpressionPart(state, node.right, node, true)\n      state.write(')')\n    } else {\n      formatBinaryExpressionPart(state, node.left, node, false)\n      state.write(' ' + node.operator + ' ')\n      formatBinaryExpressionPart(state, node.right, node, true)\n    }\n  }),\n  LogicalExpression: BinaryExpression,\n  ConditionalExpression(node, state) {\n    if (\n      EXPRESSIONS_PRECEDENCE[node.test.type] >\n      EXPRESSIONS_PRECEDENCE.ConditionalExpression\n    ) {\n      this[node.test.type](node.test, state)\n    } else {\n      state.write('(')\n      this[node.test.type](node.test, state)\n      state.write(')')\n    }\n    state.write(' ? ')\n    this[node.consequent.type](node.consequent, state)\n    state.write(' : ')\n    this[node.alternate.type](node.alternate, state)\n  },\n  NewExpression(node, state) {\n    state.write('new ')\n    if (\n      EXPRESSIONS_PRECEDENCE[node.callee.type] <\n        EXPRESSIONS_PRECEDENCE.CallExpression ||\n      hasCallExpression(node.callee)\n    ) {\n      state.write('(')\n      this[node.callee.type](node.callee, state)\n      state.write(')')\n    } else {\n      this[node.callee.type](node.callee, state)\n    }\n    formatSequence(state, node['arguments'])\n  },\n  CallExpression(node, state) {\n    if (\n      EXPRESSIONS_PRECEDENCE[node.callee.type] <\n      EXPRESSIONS_PRECEDENCE.CallExpression\n    ) {\n      state.write('(')\n      this[node.callee.type](node.callee, state)\n      state.write(')')\n    } else {\n      this[node.callee.type](node.callee, state)\n    }\n    formatSequence(state, node['arguments'])\n  },\n  MemberExpression(node, state) {\n    if (\n      EXPRESSIONS_PRECEDENCE[node.object.type] <\n      EXPRESSIONS_PRECEDENCE.MemberExpression\n    ) {\n      state.write('(')\n      this[node.object.type](node.object, state)\n      state.write(')')\n    } else {\n      this[node.object.type](node.object, state)\n    }\n    if (node.computed) {\n      state.write('[')\n      this[node.property.type](node.property, state)\n      state.write(']')\n    } else {\n      state.write('.')\n      this[node.property.type](node.property, state)\n    }\n  },\n  MetaProperty(node, state) {\n    state.write(node.meta.name + '.' + node.property.name, node)\n  },\n  Identifier(node, state) {\n    state.write(node.name, node)\n  },\n  Literal(node, state) {\n    if (node.raw != null) {\n      state.write(node.raw, node)\n    } else if (node.regex != null) {\n      this.RegExpLiteral(node, state)\n    } else {\n      state.write(stringify(node.value), node)\n    }\n  },\n  RegExpLiteral(node, state) {\n    const { regex } = node\n    state.write(`/${regex.pattern}/${regex.flags}`, node)\n  },\n}\n\nconst EMPTY_OBJECT = {}\n\nclass State {\n  constructor(options) {\n    const setup = options == null ? EMPTY_OBJECT : options\n    this.output = ''\n    // Functional options\n    if (setup.output != null) {\n      this.output = setup.output\n      this.write = this.writeToStream\n    } else {\n      this.output = ''\n    }\n    this.generator = setup.generator != null ? setup.generator : baseGenerator\n    // Formating setup\n    this.indent = setup.indent != null ? setup.indent : '  '\n    this.lineEnd = setup.lineEnd != null ? setup.lineEnd : '\\n'\n    this.indentLevel =\n      setup.startingIndentLevel != null ? setup.startingIndentLevel : 0\n    this.writeComments = setup.comments ? setup.comments : false\n    // Source map\n    if (setup.sourceMap != null) {\n      this.write =\n        setup.output == null ? this.writeAndMap : this.writeToStreamAndMap\n      this.sourceMap = setup.sourceMap\n      this.line = 1\n      this.column = 0\n      this.lineEndSize = this.lineEnd.split('\\n').length - 1\n      this.mapping = {\n        original: null,\n        generated: this,\n        name: undefined,\n        source: setup.sourceMap.file || setup.sourceMap._file,\n      }\n    }\n  }\n\n  write(code) {\n    this.output += code\n  }\n\n  writeToStream(code) {\n    this.output.write(code)\n  }\n\n  writeAndMap(code, node) {\n    this.output += code\n    this.map(code, node)\n  }\n\n  writeToStreamAndMap(code, node) {\n    this.output.write(code)\n    this.map(code, node)\n  }\n\n  map(code, node) {\n    if (node != null && node.loc != null) {\n      const { mapping } = this\n      mapping.original = node.loc.start\n      mapping.name = node.name\n      this.sourceMap.addMapping(mapping)\n    }\n    if (code.length > 0) {\n      if (this.lineEndSize > 0) {\n        if (code.endsWith(this.lineEnd)) {\n          this.line += this.lineEndSize\n          this.column = 0\n        } else if (code[code.length - 1] === '\\n') {\n          // Case of inline comment\n          this.line++\n          this.column = 0\n        } else {\n          this.column += code.length\n        }\n      } else {\n        if (code[code.length - 1] === '\\n') {\n          // Case of inline comment\n          this.line++\n          this.column = 0\n        } else {\n          this.column += code.length\n        }\n      }\n    }\n  }\n\n  toString() {\n    return this.output\n  }\n}\n\nexport function generate(node, options) {\n  /*\n  Returns a string representing the rendered code of the provided AST `node`.\n  The `options` are:\n\n  - `indent`: string to use for indentation (defaults to `␣␣`)\n  - `lineEnd`: string to use for line endings (defaults to `\\n`)\n  - `startingIndentLevel`: indent level to start from (defaults to `0`)\n  - `comments`: generate comments if `true` (defaults to `false`)\n  - `output`: output stream to write the rendered code to (defaults to `null`)\n  - `generator`: custom code generator (defaults to `baseGenerator`)\n  */\n  const state = new State(options)\n  // Travel through the AST node and generate the code\n  state.generator[node.type](node, state)\n  return state.output\n}\n"]}