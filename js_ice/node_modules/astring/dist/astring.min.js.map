{"version":3,"sources":["../src/astring.js"],"names":[],"mappings":"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","file":"astring.min.js","sourcesContent":["// Astring is a tiny and fast JavaScript code generator from an ESTree-compliant AST.\n//\n// Astring was written by David Bonnet and released under an MIT license.\n//\n// The Git repository for Astring is available at:\n// https://github.com/davidbonnet/astring.git\n//\n// Please use the GitHub bug tracker to report issues:\n// https://github.com/davidbonnet/astring/issues\n\nconst { stringify } = JSON\n\n/* istanbul ignore if */\nif (!String.prototype.repeat) {\n  /* istanbul ignore next */\n  throw new Error(\n    'String.prototype.repeat is undefined, see https://github.com/davidbonnet/astring#installation'\n  )\n}\n\n/* istanbul ignore if */\nif (!String.prototype.endsWith) {\n  /* istanbul ignore next */\n  throw new Error(\n    'String.prototype.endsWith is undefined, see https://github.com/davidbonnet/astring#installation'\n  )\n}\n\nconst OPERATOR_PRECEDENCE = {\n  '||': 3,\n  '&&': 4,\n  '|': 5,\n  '^': 6,\n  '&': 7,\n  '==': 8,\n  '!=': 8,\n  '===': 8,\n  '!==': 8,\n  '<': 9,\n  '>': 9,\n  '<=': 9,\n  '>=': 9,\n  in: 9,\n  instanceof: 9,\n  '<<': 10,\n  '>>': 10,\n  '>>>': 10,\n  '+': 11,\n  '-': 11,\n  '*': 12,\n  '%': 12,\n  '/': 12,\n  '**': 13,\n}\n\n// Enables parenthesis regardless of precedence\nconst NEEDS_PARENTHESES = 17\n\nconst EXPRESSIONS_PRECEDENCE = {\n  // Definitions\n  ArrayExpression: 20,\n  TaggedTemplateExpression: 20,\n  ThisExpression: 20,\n  Identifier: 20,\n  Literal: 18,\n  TemplateLiteral: 20,\n  Super: 20,\n  SequenceExpression: 20,\n  // Operations\n  MemberExpression: 19,\n  CallExpression: 19,\n  NewExpression: 19,\n  // Other definitions\n  ArrowFunctionExpression: NEEDS_PARENTHESES,\n  ClassExpression: NEEDS_PARENTHESES,\n  FunctionExpression: NEEDS_PARENTHESES,\n  ObjectExpression: NEEDS_PARENTHESES,\n  // Other operations\n  UpdateExpression: 16,\n  UnaryExpression: 15,\n  BinaryExpression: 14,\n  LogicalExpression: 13,\n  ConditionalExpression: 4,\n  AssignmentExpression: 3,\n  AwaitExpression: 2,\n  YieldExpression: 2,\n  RestElement: 1,\n}\n\nfunction formatSequence(state, nodes) {\n  /*\n  Writes into `state` a sequence of `nodes`.\n  */\n  const { generator } = state\n  state.write('(')\n  if (nodes != null && nodes.length > 0) {\n    generator[nodes[0].type](nodes[0], state)\n    const { length } = nodes\n    for (let i = 1; i < length; i++) {\n      const param = nodes[i]\n      state.write(', ')\n      generator[param.type](param, state)\n    }\n  }\n  state.write(')')\n}\n\nfunction expressionNeedsParenthesis(node, parentNode, isRightHand) {\n  const nodePrecedence = EXPRESSIONS_PRECEDENCE[node.type]\n  if (nodePrecedence === NEEDS_PARENTHESES) {\n    return true\n  }\n  const parentNodePrecedence = EXPRESSIONS_PRECEDENCE[parentNode.type]\n  if (nodePrecedence !== parentNodePrecedence) {\n    // Different node types\n    return nodePrecedence < parentNodePrecedence\n  }\n  if (nodePrecedence !== 13 && nodePrecedence !== 14) {\n    // Not a `LogicalExpression` or `BinaryExpression`\n    return false\n  }\n  if (node.operator === '**' && parentNode.operator === '**') {\n    // Exponentiation operator has right-to-left associativity\n    return !isRightHand\n  }\n  if (isRightHand) {\n    // Parenthesis are used if both operators have the same precedence\n    return (\n      OPERATOR_PRECEDENCE[node.operator] <=\n      OPERATOR_PRECEDENCE[parentNode.operator]\n    )\n  }\n  return (\n    OPERATOR_PRECEDENCE[node.operator] <\n    OPERATOR_PRECEDENCE[parentNode.operator]\n  )\n}\n\nfunction formatBinaryExpressionPart(state, node, parentNode, isRightHand) {\n  /*\n  Writes into `state` a left-hand or right-hand expression `node`\n  from a binary expression applying the provided `operator`.\n  The `isRightHand` parameter should be `true` if the `node` is a right-hand argument.\n  */\n  const { generator } = state\n  if (expressionNeedsParenthesis(node, parentNode, isRightHand)) {\n    state.write('(')\n    generator[node.type](node, state)\n    state.write(')')\n  } else {\n    generator[node.type](node, state)\n  }\n}\n\nfunction reindent(state, text, indent, lineEnd) {\n  /*\n  Writes into `state` the `text` string reindented with the provided `indent`.\n  */\n  const lines = text.split('\\n')\n  const end = lines.length - 1\n  state.write(lines[0].trim())\n  if (end > 0) {\n    state.write(lineEnd)\n    for (let i = 1; i < end; i++) {\n      state.write(indent + lines[i].trim() + lineEnd)\n    }\n    state.write(indent + lines[end].trim())\n  }\n}\n\nfunction formatComments(state, comments, indent, lineEnd) {\n  /*\n  Writes into `state` the provided list of `comments`, with the given `indent` and `lineEnd` strings.\n  Line comments will end with `\"\\n\"` regardless of the value of `lineEnd`.\n  Expects to start on a new unindented line.\n  */\n  const { length } = comments\n  for (let i = 0; i < length; i++) {\n    const comment = comments[i]\n    state.write(indent)\n    if (comment.type[0] === 'L') {\n      // Line comment\n      state.write('// ' + comment.value.trim() + '\\n')\n    } else {\n      // Block comment\n      state.write('/*')\n      reindent(state, comment.value, indent, lineEnd)\n      state.write('*/' + lineEnd)\n    }\n  }\n}\n\nfunction hasCallExpression(node) {\n  /*\n  Returns `true` if the provided `node` contains a call expression and `false` otherwise.\n  */\n  let currentNode = node\n  while (currentNode != null) {\n    const { type } = currentNode\n    if (type[0] === 'C' && type[1] === 'a') {\n      // Is CallExpression\n      return true\n    } else if (type[0] === 'M' && type[1] === 'e' && type[2] === 'm') {\n      // Is MemberExpression\n      currentNode = currentNode.object\n    } else {\n      return false\n    }\n  }\n}\n\nfunction formatVariableDeclaration(state, node) {\n  /*\n  Writes into `state` a variable declaration.\n  */\n  const { generator } = state\n  const { declarations } = node\n  state.write(node.kind + ' ')\n  const { length } = declarations\n  if (length > 0) {\n    generator.VariableDeclarator(declarations[0], state)\n    for (let i = 1; i < length; i++) {\n      state.write(', ')\n      generator.VariableDeclarator(declarations[i], state)\n    }\n  }\n}\n\nlet ForInStatement,\n  FunctionDeclaration,\n  RestElement,\n  BinaryExpression,\n  ArrayExpression,\n  BlockStatement\n\nexport const baseGenerator = {\n  Program(node, state) {\n    const indent = state.indent.repeat(state.indentLevel)\n    const { lineEnd, writeComments } = state\n    if (writeComments && node.comments != null) {\n      formatComments(state, node.comments, indent, lineEnd)\n    }\n    const statements = node.body\n    const { length } = statements\n    for (let i = 0; i < length; i++) {\n      const statement = statements[i]\n      if (writeComments && statement.comments != null) {\n        formatComments(state, statement.comments, indent, lineEnd)\n      }\n      state.write(indent)\n      this[statement.type](statement, state)\n      state.write(lineEnd)\n    }\n    if (writeComments && node.trailingComments != null) {\n      formatComments(state, node.trailingComments, indent, lineEnd)\n    }\n  },\n  BlockStatement: (BlockStatement = function(node, state) {\n    const indent = state.indent.repeat(state.indentLevel++)\n    const { lineEnd, writeComments } = state\n    const statementIndent = indent + state.indent\n    state.write('{')\n    const statements = node.body\n    if (statements != null && statements.length > 0) {\n      state.write(lineEnd)\n      if (writeComments && node.comments != null) {\n        formatComments(state, node.comments, statementIndent, lineEnd)\n      }\n      const { length } = statements\n      for (let i = 0; i < length; i++) {\n        const statement = statements[i]\n        if (writeComments && statement.comments != null) {\n          formatComments(state, statement.comments, statementIndent, lineEnd)\n        }\n        state.write(statementIndent)\n        this[statement.type](statement, state)\n        state.write(lineEnd)\n      }\n      state.write(indent)\n    } else {\n      if (writeComments && node.comments != null) {\n        state.write(lineEnd)\n        formatComments(state, node.comments, statementIndent, lineEnd)\n        state.write(indent)\n      }\n    }\n    if (writeComments && node.trailingComments != null) {\n      formatComments(state, node.trailingComments, statementIndent, lineEnd)\n    }\n    state.write('}')\n    state.indentLevel--\n  }),\n  ClassBody: BlockStatement,\n  EmptyStatement(node, state) {\n    state.write(';')\n  },\n  ExpressionStatement(node, state) {\n    const precedence = EXPRESSIONS_PRECEDENCE[node.expression.type]\n    if (\n      precedence === NEEDS_PARENTHESES ||\n      (precedence === 3 && node.expression.left.type[0] === 'O')\n    ) {\n      // Should always have parentheses or is an AssignmentExpression to an ObjectPattern\n      state.write('(')\n      this[node.expression.type](node.expression, state)\n      state.write(')')\n    } else {\n      this[node.expression.type](node.expression, state)\n    }\n    state.write(';')\n  },\n  IfStatement(node, state) {\n    state.write('if (')\n    this[node.test.type](node.test, state)\n    state.write(') ')\n    this[node.consequent.type](node.consequent, state)\n    if (node.alternate != null) {\n      state.write(' else ')\n      this[node.alternate.type](node.alternate, state)\n    }\n  },\n  LabeledStatement(node, state) {\n    this[node.label.type](node.label, state)\n    state.write(': ')\n    this[node.body.type](node.body, state)\n  },\n  BreakStatement(node, state) {\n    state.write('break')\n    if (node.label != null) {\n      state.write(' ')\n      this[node.label.type](node.label, state)\n    }\n    state.write(';')\n  },\n  ContinueStatement(node, state) {\n    state.write('continue')\n    if (node.label != null) {\n      state.write(' ')\n      this[node.label.type](node.label, state)\n    }\n    state.write(';')\n  },\n  WithStatement(node, state) {\n    state.write('with (')\n    this[node.object.type](node.object, state)\n    state.write(') ')\n    this[node.body.type](node.body, state)\n  },\n  SwitchStatement(node, state) {\n    const indent = state.indent.repeat(state.indentLevel++)\n    const { lineEnd, writeComments } = state\n    state.indentLevel++\n    const caseIndent = indent + state.indent\n    const statementIndent = caseIndent + state.indent\n    state.write('switch (')\n    this[node.discriminant.type](node.discriminant, state)\n    state.write(') {' + lineEnd)\n    const { cases: occurences } = node\n    const { length: occurencesCount } = occurences\n    for (let i = 0; i < occurencesCount; i++) {\n      const occurence = occurences[i]\n      if (writeComments && occurence.comments != null) {\n        formatComments(state, occurence.comments, caseIndent, lineEnd)\n      }\n      if (occurence.test) {\n        state.write(caseIndent + 'case ')\n        this[occurence.test.type](occurence.test, state)\n        state.write(':' + lineEnd)\n      } else {\n        state.write(caseIndent + 'default:' + lineEnd)\n      }\n      const { consequent } = occurence\n      const { length: consequentCount } = consequent\n      for (let i = 0; i < consequentCount; i++) {\n        const statement = consequent[i]\n        if (writeComments && statement.comments != null) {\n          formatComments(state, statement.comments, statementIndent, lineEnd)\n        }\n        state.write(statementIndent)\n        this[statement.type](statement, state)\n        state.write(lineEnd)\n      }\n    }\n    state.indentLevel -= 2\n    state.write(indent + '}')\n  },\n  ReturnStatement(node, state) {\n    state.write('return')\n    if (node.argument) {\n      state.write(' ')\n      this[node.argument.type](node.argument, state)\n    }\n    state.write(';')\n  },\n  ThrowStatement(node, state) {\n    state.write('throw ')\n    this[node.argument.type](node.argument, state)\n    state.write(';')\n  },\n  TryStatement(node, state) {\n    state.write('try ')\n    this[node.block.type](node.block, state)\n    if (node.handler) {\n      const { handler } = node\n      state.write(' catch (')\n      this[handler.param.type](handler.param, state)\n      state.write(') ')\n      this[handler.body.type](handler.body, state)\n    }\n    if (node.finalizer) {\n      state.write(' finally ')\n      this[node.finalizer.type](node.finalizer, state)\n    }\n  },\n  WhileStatement(node, state) {\n    state.write('while (')\n    this[node.test.type](node.test, state)\n    state.write(') ')\n    this[node.body.type](node.body, state)\n  },\n  DoWhileStatement(node, state) {\n    state.write('do ')\n    this[node.body.type](node.body, state)\n    state.write(' while (')\n    this[node.test.type](node.test, state)\n    state.write(');')\n  },\n  ForStatement(node, state) {\n    state.write('for (')\n    if (node.init != null) {\n      const { init } = node\n      if (init.type[0] === 'V') {\n        formatVariableDeclaration(state, init)\n      } else {\n        this[init.type](init, state)\n      }\n    }\n    state.write('; ')\n    if (node.test) {\n      this[node.test.type](node.test, state)\n    }\n    state.write('; ')\n    if (node.update) {\n      this[node.update.type](node.update, state)\n    }\n    state.write(') ')\n    this[node.body.type](node.body, state)\n  },\n  ForInStatement: (ForInStatement = function(node, state) {\n    state.write('for (')\n    const { left } = node\n    if (left.type[0] === 'V') {\n      formatVariableDeclaration(state, left)\n    } else {\n      this[left.type](left, state)\n    }\n    // Identifying whether node.type is `ForInStatement` or `ForOfStatement`\n    state.write(node.type[3] === 'I' ? ' in ' : ' of ')\n    this[node.right.type](node.right, state)\n    state.write(') ')\n    this[node.body.type](node.body, state)\n  }),\n  ForOfStatement: ForInStatement,\n  DebuggerStatement(node, state) {\n    state.write('debugger;' + state.lineEnd)\n  },\n  FunctionDeclaration: (FunctionDeclaration = function(node, state) {\n    state.write(\n      (node.async ? 'async ' : '') +\n        (node.generator ? 'function* ' : 'function ') +\n        (node.id ? node.id.name : ''),\n      node\n    )\n    formatSequence(state, node.params)\n    state.write(' ')\n    this[node.body.type](node.body, state)\n  }),\n  FunctionExpression: FunctionDeclaration,\n  VariableDeclaration(node, state) {\n    formatVariableDeclaration(state, node)\n    state.write(';')\n  },\n  VariableDeclarator(node, state) {\n    this[node.id.type](node.id, state)\n    if (node.init != null) {\n      state.write(' = ')\n      this[node.init.type](node.init, state)\n    }\n  },\n  ClassDeclaration(node, state) {\n    state.write('class ' + (node.id ? `${node.id.name} ` : ''), node)\n    if (node.superClass) {\n      state.write('extends ')\n      this[node.superClass.type](node.superClass, state)\n      state.write(' ')\n    }\n    this.ClassBody(node.body, state)\n  },\n  ImportDeclaration(node, state) {\n    state.write('import ')\n    const { specifiers } = node\n    const { length } = specifiers\n    // NOTE: Once babili is fixed, put this after condition\n    // https://github.com/babel/babili/issues/430\n    let i = 0\n    if (length > 0) {\n      for (; i < length; ) {\n        if (i > 0) {\n          state.write(', ')\n        }\n        const specifier = specifiers[i]\n        const type = specifier.type[6]\n        if (type === 'D') {\n          // ImportDefaultSpecifier\n          state.write(specifier.local.name, specifier)\n          i++\n        } else if (type === 'N') {\n          // ImportNamespaceSpecifier\n          state.write('* as ' + specifier.local.name, specifier)\n          i++\n        } else {\n          // ImportSpecifier\n          break\n        }\n      }\n      if (i < length) {\n        state.write('{')\n        for (;;) {\n          const specifier = specifiers[i]\n          const { name } = specifier.imported\n          state.write(name, specifier)\n          if (name !== specifier.local.name) {\n            state.write(' as ' + specifier.local.name)\n          }\n          if (++i < length) {\n            state.write(', ')\n          } else {\n            break\n          }\n        }\n        state.write('}')\n      }\n      state.write(' from ')\n    }\n    this.Literal(node.source, state)\n    state.write(';')\n  },\n  ExportDefaultDeclaration(node, state) {\n    state.write('export default ')\n    this[node.declaration.type](node.declaration, state)\n    if (\n      EXPRESSIONS_PRECEDENCE[node.declaration.type] &&\n      node.declaration.type[0] !== 'F'\n    ) {\n      // All expression nodes except `FunctionExpression`\n      state.write(';')\n    }\n  },\n  ExportNamedDeclaration(node, state) {\n    state.write('export ')\n    if (node.declaration) {\n      this[node.declaration.type](node.declaration, state)\n    } else {\n      state.write('{')\n      const { specifiers } = node,\n        { length } = specifiers\n      if (length > 0) {\n        for (let i = 0; ; ) {\n          const specifier = specifiers[i]\n          const { name } = specifier.local\n          state.write(name, specifier)\n          if (name !== specifier.exported.name) {\n            state.write(' as ' + specifier.exported.name)\n          }\n          if (++i < length) {\n            state.write(', ')\n          } else {\n            break\n          }\n        }\n      }\n      state.write('}')\n      if (node.source) {\n        state.write(' from ')\n        this.Literal(node.source, state)\n      }\n      state.write(';')\n    }\n  },\n  ExportAllDeclaration(node, state) {\n    state.write('export * from ')\n    this.Literal(node.source, state)\n    state.write(';')\n  },\n  MethodDefinition(node, state) {\n    if (node.static) {\n      state.write('static ')\n    }\n    const kind = node.kind[0]\n    if (kind === 'g' || kind === 's') {\n      // Getter or setter\n      state.write(node.kind + ' ')\n    }\n    if (node.value.async) {\n      state.write('async ')\n    }\n    if (node.value.generator) {\n      state.write('*')\n    }\n    if (node.computed) {\n      state.write('[')\n      this[node.key.type](node.key, state)\n      state.write(']')\n    } else {\n      this[node.key.type](node.key, state)\n    }\n    formatSequence(state, node.value.params)\n    state.write(' ')\n    this[node.value.body.type](node.value.body, state)\n  },\n  ClassExpression(node, state) {\n    this.ClassDeclaration(node, state)\n  },\n  ArrowFunctionExpression(node, state) {\n    state.write(node.async ? 'async ' : '', node)\n    const { params } = node\n    if (params != null) {\n      // Omit parenthesis if only one named parameter\n      if (params.length === 1 && params[0].type[0] === 'I') {\n        // If params[0].type[0] starts with 'I', it can't be `ImportDeclaration` nor `IfStatement` and thus is `Identifier`\n        state.write(params[0].name, params[0])\n      } else {\n        formatSequence(state, node.params)\n      }\n    }\n    state.write(' => ')\n    if (node.body.type[0] === 'O') {\n      // Body is an object expression\n      state.write('(')\n      this.ObjectExpression(node.body, state)\n      state.write(')')\n    } else {\n      this[node.body.type](node.body, state)\n    }\n  },\n  ThisExpression(node, state) {\n    state.write('this', node)\n  },\n  Super(node, state) {\n    state.write('super', node)\n  },\n  RestElement: (RestElement = function(node, state) {\n    state.write('...')\n    this[node.argument.type](node.argument, state)\n  }),\n  SpreadElement: RestElement,\n  YieldExpression(node, state) {\n    state.write(node.delegate ? 'yield*' : 'yield')\n    if (node.argument) {\n      state.write(' ')\n      this[node.argument.type](node.argument, state)\n    }\n  },\n  AwaitExpression(node, state) {\n    state.write('await ')\n    if (node.argument) {\n      this[node.argument.type](node.argument, state)\n    }\n  },\n  TemplateLiteral(node, state) {\n    const { quasis, expressions } = node\n    state.write('`')\n    const { length } = expressions\n    for (let i = 0; i < length; i++) {\n      const expression = expressions[i]\n      state.write(quasis[i].value.raw)\n      state.write('${')\n      this[expression.type](expression, state)\n      state.write('}')\n    }\n    state.write(quasis[quasis.length - 1].value.raw)\n    state.write('`')\n  },\n  TaggedTemplateExpression(node, state) {\n    this[node.tag.type](node.tag, state)\n    this[node.quasi.type](node.quasi, state)\n  },\n  ArrayExpression: (ArrayExpression = function(node, state) {\n    state.write('[')\n    if (node.elements.length > 0) {\n      const { elements } = node,\n        { length } = elements\n      for (let i = 0; ; ) {\n        const element = elements[i]\n        if (element != null) {\n          this[element.type](element, state)\n        }\n        if (++i < length) {\n          state.write(', ')\n        } else {\n          if (element == null) {\n            state.write(', ')\n          }\n          break\n        }\n      }\n    }\n    state.write(']')\n  }),\n  ArrayPattern: ArrayExpression,\n  ObjectExpression(node, state) {\n    const indent = state.indent.repeat(state.indentLevel++)\n    const { lineEnd, writeComments } = state\n    const propertyIndent = indent + state.indent\n    state.write('{')\n    if (node.properties.length > 0) {\n      state.write(lineEnd)\n      if (writeComments && node.comments != null) {\n        formatComments(state, node.comments, propertyIndent, lineEnd)\n      }\n      const comma = ',' + lineEnd\n      const { properties } = node,\n        { length } = properties\n      for (let i = 0; ; ) {\n        const property = properties[i]\n        if (writeComments && property.comments != null) {\n          formatComments(state, property.comments, propertyIndent, lineEnd)\n        }\n        state.write(propertyIndent)\n        this.Property(property, state)\n        if (++i < length) {\n          state.write(comma)\n        } else {\n          break\n        }\n      }\n      state.write(lineEnd)\n      if (writeComments && node.trailingComments != null) {\n        formatComments(state, node.trailingComments, propertyIndent, lineEnd)\n      }\n      state.write(indent + '}')\n    } else if (writeComments) {\n      if (node.comments != null) {\n        state.write(lineEnd)\n        formatComments(state, node.comments, propertyIndent, lineEnd)\n        if (node.trailingComments != null) {\n          formatComments(state, node.trailingComments, propertyIndent, lineEnd)\n        }\n        state.write(indent + '}')\n      } else if (node.trailingComments != null) {\n        state.write(lineEnd)\n        formatComments(state, node.trailingComments, propertyIndent, lineEnd)\n        state.write(indent + '}')\n      } else {\n        state.write('}')\n      }\n    } else {\n      state.write('}')\n    }\n    state.indentLevel--\n  },\n  Property(node, state) {\n    if (node.method || node.kind[0] !== 'i') {\n      // Either a method or of kind `set` or `get` (not `init`)\n      this.MethodDefinition(node, state)\n    } else {\n      if (!node.shorthand) {\n        if (node.computed) {\n          state.write('[')\n          this[node.key.type](node.key, state)\n          state.write(']')\n        } else {\n          this[node.key.type](node.key, state)\n        }\n        state.write(': ')\n      }\n      this[node.value.type](node.value, state)\n    }\n  },\n  ObjectPattern(node, state) {\n    state.write('{')\n    if (node.properties.length > 0) {\n      const { properties } = node,\n        { length } = properties\n      for (let i = 0; ; ) {\n        this[properties[i].type](properties[i], state)\n        if (++i < length) {\n          state.write(', ')\n        } else {\n          break\n        }\n      }\n    }\n    state.write('}')\n  },\n  SequenceExpression(node, state) {\n    formatSequence(state, node.expressions)\n  },\n  UnaryExpression(node, state) {\n    if (node.prefix) {\n      state.write(node.operator)\n      if (node.operator.length > 1) {\n        state.write(' ')\n      }\n      if (\n        EXPRESSIONS_PRECEDENCE[node.argument.type] <\n        EXPRESSIONS_PRECEDENCE.UnaryExpression\n      ) {\n        state.write('(')\n        this[node.argument.type](node.argument, state)\n        state.write(')')\n      } else {\n        this[node.argument.type](node.argument, state)\n      }\n    } else {\n      // FIXME: This case never occurs\n      this[node.argument.type](node.argument, state)\n      state.write(node.operator)\n    }\n  },\n  UpdateExpression(node, state) {\n    // Always applied to identifiers or members, no parenthesis check needed\n    if (node.prefix) {\n      state.write(node.operator)\n      this[node.argument.type](node.argument, state)\n    } else {\n      this[node.argument.type](node.argument, state)\n      state.write(node.operator)\n    }\n  },\n  AssignmentExpression(node, state) {\n    this[node.left.type](node.left, state)\n    state.write(' ' + node.operator + ' ')\n    this[node.right.type](node.right, state)\n  },\n  AssignmentPattern(node, state) {\n    this[node.left.type](node.left, state)\n    state.write(' = ')\n    this[node.right.type](node.right, state)\n  },\n  BinaryExpression: (BinaryExpression = function(node, state) {\n    if (node.operator === 'in') {\n      // Avoids confusion in `for` loops initializers\n      state.write('(')\n      formatBinaryExpressionPart(state, node.left, node, false)\n      state.write(' ' + node.operator + ' ')\n      formatBinaryExpressionPart(state, node.right, node, true)\n      state.write(')')\n    } else {\n      formatBinaryExpressionPart(state, node.left, node, false)\n      state.write(' ' + node.operator + ' ')\n      formatBinaryExpressionPart(state, node.right, node, true)\n    }\n  }),\n  LogicalExpression: BinaryExpression,\n  ConditionalExpression(node, state) {\n    if (\n      EXPRESSIONS_PRECEDENCE[node.test.type] >\n      EXPRESSIONS_PRECEDENCE.ConditionalExpression\n    ) {\n      this[node.test.type](node.test, state)\n    } else {\n      state.write('(')\n      this[node.test.type](node.test, state)\n      state.write(')')\n    }\n    state.write(' ? ')\n    this[node.consequent.type](node.consequent, state)\n    state.write(' : ')\n    this[node.alternate.type](node.alternate, state)\n  },\n  NewExpression(node, state) {\n    state.write('new ')\n    if (\n      EXPRESSIONS_PRECEDENCE[node.callee.type] <\n        EXPRESSIONS_PRECEDENCE.CallExpression ||\n      hasCallExpression(node.callee)\n    ) {\n      state.write('(')\n      this[node.callee.type](node.callee, state)\n      state.write(')')\n    } else {\n      this[node.callee.type](node.callee, state)\n    }\n    formatSequence(state, node['arguments'])\n  },\n  CallExpression(node, state) {\n    if (\n      EXPRESSIONS_PRECEDENCE[node.callee.type] <\n      EXPRESSIONS_PRECEDENCE.CallExpression\n    ) {\n      state.write('(')\n      this[node.callee.type](node.callee, state)\n      state.write(')')\n    } else {\n      this[node.callee.type](node.callee, state)\n    }\n    formatSequence(state, node['arguments'])\n  },\n  MemberExpression(node, state) {\n    if (\n      EXPRESSIONS_PRECEDENCE[node.object.type] <\n      EXPRESSIONS_PRECEDENCE.MemberExpression\n    ) {\n      state.write('(')\n      this[node.object.type](node.object, state)\n      state.write(')')\n    } else {\n      this[node.object.type](node.object, state)\n    }\n    if (node.computed) {\n      state.write('[')\n      this[node.property.type](node.property, state)\n      state.write(']')\n    } else {\n      state.write('.')\n      this[node.property.type](node.property, state)\n    }\n  },\n  MetaProperty(node, state) {\n    state.write(node.meta.name + '.' + node.property.name, node)\n  },\n  Identifier(node, state) {\n    state.write(node.name, node)\n  },\n  Literal(node, state) {\n    if (node.raw != null) {\n      state.write(node.raw, node)\n    } else if (node.regex != null) {\n      this.RegExpLiteral(node, state)\n    } else {\n      state.write(stringify(node.value), node)\n    }\n  },\n  RegExpLiteral(node, state) {\n    const { regex } = node\n    state.write(`/${regex.pattern}/${regex.flags}`, node)\n  },\n}\n\nconst EMPTY_OBJECT = {}\n\nclass State {\n  constructor(options) {\n    const setup = options == null ? EMPTY_OBJECT : options\n    this.output = ''\n    // Functional options\n    if (setup.output != null) {\n      this.output = setup.output\n      this.write = this.writeToStream\n    } else {\n      this.output = ''\n    }\n    this.generator = setup.generator != null ? setup.generator : baseGenerator\n    // Formating setup\n    this.indent = setup.indent != null ? setup.indent : '  '\n    this.lineEnd = setup.lineEnd != null ? setup.lineEnd : '\\n'\n    this.indentLevel =\n      setup.startingIndentLevel != null ? setup.startingIndentLevel : 0\n    this.writeComments = setup.comments ? setup.comments : false\n    // Source map\n    if (setup.sourceMap != null) {\n      this.write =\n        setup.output == null ? this.writeAndMap : this.writeToStreamAndMap\n      this.sourceMap = setup.sourceMap\n      this.line = 1\n      this.column = 0\n      this.lineEndSize = this.lineEnd.split('\\n').length - 1\n      this.mapping = {\n        original: null,\n        generated: this,\n        name: undefined,\n        source: setup.sourceMap.file || setup.sourceMap._file,\n      }\n    }\n  }\n\n  write(code) {\n    this.output += code\n  }\n\n  writeToStream(code) {\n    this.output.write(code)\n  }\n\n  writeAndMap(code, node) {\n    this.output += code\n    this.map(code, node)\n  }\n\n  writeToStreamAndMap(code, node) {\n    this.output.write(code)\n    this.map(code, node)\n  }\n\n  map(code, node) {\n    if (node != null && node.loc != null) {\n      const { mapping } = this\n      mapping.original = node.loc.start\n      mapping.name = node.name\n      this.sourceMap.addMapping(mapping)\n    }\n    if (code.length > 0) {\n      if (this.lineEndSize > 0) {\n        if (code.endsWith(this.lineEnd)) {\n          this.line += this.lineEndSize\n          this.column = 0\n        } else if (code[code.length - 1] === '\\n') {\n          // Case of inline comment\n          this.line++\n          this.column = 0\n        } else {\n          this.column += code.length\n        }\n      } else {\n        if (code[code.length - 1] === '\\n') {\n          // Case of inline comment\n          this.line++\n          this.column = 0\n        } else {\n          this.column += code.length\n        }\n      }\n    }\n  }\n\n  toString() {\n    return this.output\n  }\n}\n\nexport function generate(node, options) {\n  /*\n  Returns a string representing the rendered code of the provided AST `node`.\n  The `options` are:\n\n  - `indent`: string to use for indentation (defaults to `␣␣`)\n  - `lineEnd`: string to use for line endings (defaults to `\\n`)\n  - `startingIndentLevel`: indent level to start from (defaults to `0`)\n  - `comments`: generate comments if `true` (defaults to `false`)\n  - `output`: output stream to write the rendered code to (defaults to `null`)\n  - `generator`: custom code generator (defaults to `baseGenerator`)\n  */\n  const state = new State(options)\n  // Travel through the AST node and generate the code\n  state.generator[node.type](node, state)\n  return state.output\n}\n"]}